# -*- coding: utf-8 -*-
"""Similarity of images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jhffu5hb_8h5E3ZTRwohe-Y5saF50MDG
"""

import os
import keras
from keras.preprocessing import image
from keras.applications.imagenet_utils import decode_predictions, preprocess_input
from keras.models import Model
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from scipy.spatial import distance

model = keras.applications.VGG19(weights='imagenet', include_top=True)
#model.summary()

def load_image(path:str):
    """
     A Function that formats the image to be processed using dnn.

     Parameters:
      - path = The image path of the image.

     Returns:
      - it return two value frist the new preprocess image and the input image data that can be fed into a neural network for prediction.
    """
    img = image.load_img(path, target_size=model.input_shape[1:3])
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    return img, x

# img, x = load_image("/content/heba.jpg")
# print("shape of x: ", x.shape)
# print("data type: ", x.dtype)
# plt.imshow(img)

feat_extractor = Model(inputs=model.input, outputs=model.get_layer("fc2").output)

# feat_extractor.summary()

# img, x = load_image("/content/image.jpg")
# feat = feat_extractor.predict(x)

# plt.figure(figsize=(16,4))
# plt.plot(feat[0])

# for i, image_path in enumerate(images):
#   img, x = load_image(image_path)
#   feat = feat_extractor.predict(x)[0]
#   features.append(feat)

# images = [os.path.join(dp, f) for dp, dn, filenames in os.walk(images_path) for f in filenames if os.path.splitext(f)[1].lower() in image_extensions]

def get_closest_images(query_image_idx:int, num_results: int = 5)->list:
    """
    Retrieve the indices of the closest images to a given query image based on cosine distances.

    Parameters:
    - query_image_idx (int): Index of the query image in the feature vectors dataset.
    - num_results (int): Number of closest images to retrieve (default is 5).

    Returns:
    - idx_closest (list): List of indices corresponding to the closest images to the query image.
    """
    distances = [ distance.cosine(pca_features[query_image_idx], feat) for feat in pca_features ]
    idx_closest = sorted(range(len(distances)), key=lambda k: distances[k])[0:num_results+1]
    return idx_closest

def get_concatenated_images(images:list,indexes:list, thumb_height:int):
    """
    Concatenate a set of resized thumbnail images based on specified indices.

    Parameters:
    - images (list): List of image paths.
    - indexes (list): List of indices indicating which images to concatenate.
    - thumb_height (int): Height in pixels for resizing each thumbnail image.

    Returns:
    - concat_image (numpy.ndarray): Concatenated image array created from the specified thumbnails.
    """
    thumbs = []
    for idx in indexes:
        if idx!= len(images):
          img = image.load_img(images[idx])
          img = img.resize((int(img.width * thumb_height / img.height), thumb_height))
          thumbs.append(img)
    concat_image = np.concatenate([np.asarray(t) for t in thumbs], axis=1)
    return concat_image

def get_names(images,indexes):
  images_names=[]
  for idx in indexes:
    if idx!= len(images):
      img=images[idx]
      base_name=os.path.basename(img)
      (file_Name,ext)=os.path.splitext(base_name)
      images_names.append(file_Name)
  return images_names

def show_res(test_img,res_image):
  plt.figure(figsize = (5,5))
  query_image=plt.imread(test_img)
  plt.imshow(query_image)
  plt.title("query image")
  plt.show()
  plt.imshow(res_image)
  plt.title("result images")

images = []
np.save('images.npy', images)
features = []
np.save('features.npy', features)

def most_Similarity_images(folder_path,img_path,Number_Of_Reterned_Image):
  """
     A Function that search for an image that is close to the entered image in a specific folder.

     Parameters:
     - folder_path = The folder path you want to search in it.
     - img_path = The image path of the image.
     - Number_Of_Reterned_Image = number of images you want to return.

     Returns:
      - it Returns matching images that were selected using Number_Of_Reterned_Image.
  """
  images_path = folder_path
  image_extensions = ['.jpg', '.png', '.jpeg']   # case-insensitive (upper/lower doesn't matter)
  max_num_images = 10000
  images = np.load('/content/images.npy', mmap_mode='r+').tolist()
  # print(len(images))
  new_images=[]
  for item in os.listdir(folder_path):
    item_path = os.path.join(folder_path, item)
    if item_path not in images and os.path.splitext(item_path)[1].lower() in image_extensions:
      new_images.append(item_path)
  # print(len(new_images))
  if max_num_images < len(images):
      images = [images[i] for i in sorted(random.sample(range(len(images)), max_num_images))]

  features = np.load('features.npy', mmap_mode='r+').tolist()
  # print(len(features))

  new_features = []
  if len(new_images)>0:
    for i, image_path in enumerate(new_images):
      img, x = load_image(image_path)
      feat = feat_extractor.predict(x)[0]
      new_features.append(feat)
    images2=images+new_images
    np.save('/content/images.npy', images2)

    features2=features+new_features
    np.save('features.npy', features2)

    images = np.load('/content/images.npy')
    images=images.tolist()

    features = np.load('/content/features.npy')
    features=features.tolist()
  # print(len(features))



  img, x = load_image(img_path);
  feat = feat_extractor.predict(x)[0]
  features.append(feat)

  features = np.array(features)
  pca = PCA(n_components=len(images))
  pca.fit(features)
  pca_features = pca.transform(features)

  similar_idx = [ distance.cosine(pca_features[len(pca_features)-1], feat) for feat in pca_features ]
  idx_closest = sorted(range(len(similar_idx)), key=lambda k: similar_idx[k])[0:Number_Of_Reterned_Image+1]
  # results_image = get_concatenated_images(images,idx_closest, 300)
  results_image2=get_names(images,idx_closest)
  return results_image2
  # return (results_image,results_image2)


im_path="/content/slooha.jpg"
results_image2=most_Similarity_images("/content/things",im_path,3)
# results_image,results_image2=most_Similarity_images("/content/things",im_path,1)
print(results_image2)
# show_res(im_path,results_image)