# -*- coding: utf-8 -*-
"""tamweenCard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_QzQrH8bWoVqg57TLbG7vohs-_Sp-4H
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt
import imutils
from imutils import contours

def get_numbers_from_img(id)-> dict:
  id = cv2.GaussianBlur(id, (3,3), 0)
  ref = cv2.threshold(id, 0, 255, cv2.THRESH_BINARY_INV|cv2.THRESH_OTSU)[1]
  kernal = np.ones((2,2), np.uint8)
  ref = cv2.dilate(ref, kernal, iterations=1)
  plt.imshow(ref,cmap="gray")
  plt.show()
  refCnts = cv2.findContours(ref.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
  refCnts = imutils.grab_contours(refCnts)
  refCnts = contours.sort_contours(refCnts, method="left-to-right")[0]
  # print(len(refCnts))
  digits = {}
  i=0
  for  c in refCnts:
      (x, y, w, h) = cv2.boundingRect(c)
      roi = id[y-3:y + h+3, x-3:x + w+3]
      # cv2.rectangle(id,(x-6,y-6),(x + w+6,y + h+6),(0,255,0),2)
      if len(roi)>0:
        roi = cv2.resize(roi, (57, 88))
        roi=cv2.bilateralFilter(roi,11,17,17)
        digits[i] = roi
        # plt.imshow(roi,cmap="gray")
        # plt.axis('off')
        # plt.show()
        i+=1
  return digits

# img2=cv2.imread("/content/test.png")
# img2 = cv2.resize(img2, (700, 480))
# gray2=cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
# id = gray2[356:400 , 350:670]
# id_2= gray2[390:435 , 400:680]
# id_2 = gray2[390:435 , 400:]

# plt.imshow(id,cmap="gray")
# plt.show()
# get_numbers_from_img(id)

def get_number(img_path:str,line_num:int)-> list:
  """
  A Function that extract the numbers from the tamween Card part from image as intger values.

  Parameters:
  - the tamween Card image path.

  Returns:
  - it return a List the numbers that been extracted from image and the list with type intger.
  """
  img2=cv2.imread(img_path)
  img2 = cv2.resize(img2, (700, 480))
  # img2=img2[:,30:]
  gray2=cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
  id=0
  if line_num==1:
    # id = gray2[350:400 , 350:660]
    id = gray2[349:400 , 355:]
    # id = gray2[350:400 , 350:650]
    # id = gray2[360:400 , 350:664]
    # id = gray2[360:400 , 350:670]
  if line_num==2:
    id = gray2[390:435 , 400:]
    # id = gray2[390:435 , 400:660]

  template0=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_0.png",0)
  template0 = cv2.resize(template0, (57, 88))
  template0=cv2.bilateralFilter(template0,11,17,17)



  template1=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_1.png",0)
  template1 = cv2.resize(template1, (57, 88))
  template1=cv2.bilateralFilter(template1,11,17,17)

  template2=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_2.png",0)
  template2 = cv2.resize(template2, (57, 88))
  template2=cv2.bilateralFilter(template2,11,17,17)

  template3=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_3.png",0)
  template3 = cv2.resize(template3, (57, 88))
  template3=cv2.bilateralFilter(template3,11,17,17)


  template4=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_4.png",0)
  template4 = cv2.resize(template4, (57, 88))
  template4=cv2.bilateralFilter(template4,11,17,17)


  template5=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_5.png",0)
  template5 = cv2.resize(template5, (57, 88))
  template5=cv2.bilateralFilter(template5,11,17,17)

  template6=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_6.png",0)
  template6 = cv2.resize(template6, (57, 88))
  template6=cv2.bilateralFilter(template6,11,17,17)

  template7=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_7.png",0)
  template7 = cv2.resize(template7, (57, 88))
  template7=cv2.bilateralFilter(template7,11,17,17)

  template8=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_8.png",0)
  template8 = cv2.resize(template8, (57, 88))
  template8=cv2.bilateralFilter(template8,11,17,17)

  template9=cv2.imread("/content/drive/MyDrive/ColabNotebooks/arabic tamween Number/number_9.png",0)
  template9 = cv2.resize(template9, (57, 88))
  template9=cv2.bilateralFilter(template9,11,17,17)

  num_templates=[template0,template1,template2,template3,template4,template5,template6,template7,template8,template9]

  dig=get_numbers_from_img(id)
  numbers=[]
  iter_num=0
  for num in range(0,len(dig)):
    # print((w,h),template4.shape)
    for number in range(0,10):
     w,h=num_templates[number].shape[::-1]
     res=cv2.matchTemplate(dig[num],num_templates[number],cv2.TM_CCORR_NORMED)
     thresh=0.999
     thresh2=thresh
     loc=np.where(res>=thresh)
    #  print(loc)
     if len(loc[0]) >0 and len(loc[1])>0:
      # print(number)
      numbers.append(number)
      break
     elif len(loc[0])==0 and len(loc[1])==0 and number==9:
      loc2=([],[])
      thresh2=thresh-0.001
      while len(loc2[0])==0 and len(loc2[1])==0:
        for number2 in range(0,10):
          #  w,h=num_templates[number2].shape[::-1]
           res2=cv2.matchTemplate(dig[num],num_templates[number2],cv2.TM_CCORR_NORMED)
           loc2=np.where(res2>=thresh2)
           if len(loc2[0]) >0 and len(loc2[1])>0:
            numbers.append(number2)
            break
           elif len(loc2[0])==0 and len(loc2[1])==0 and number2==9:
                thresh2-=0.001
  if line_num==1:
    numbers=numbers[0:14]
  if line_num==2:
    numbers=numbers[0:12]
  return numbers

# id_num=get_number("/content/test.png",1)
# print(id_num)

import datetime as dt

class ID:
    def __init__(self,number:int):

        self.Number=number

    def get_BirthDate(self):
        """
         A Function that extract the brith date from the National ID card number.

         Parameters:
         - the id card number with type intger.

         Returns:
         - it return BirthDate of the id card owner with type datetime.
        """
        centray=""
        Birthyear=""
        self.Number=str(self.Number)
        if self.Number[0]=="2":
            centray="1900"
        elif self.Number[0]=="3":
            centray="2000"
        Birthyear=int(centray)+int(self.Number[1:3])
        Month=int(self.Number[3:5])
        Day=int(self.Number[5:7])
        BirthDate=dt.datetime(Birthyear,Month,Day)
        return BirthDate

    def get_BirthPlace(self):
        """
         A Function that extract the Birth Place from the National ID card number.

         Parameters:
         - the id card number with type intger.

         Returns:
         - it return Birth Place of the id card owner with type string.
        """
        self.Number=str(self.Number)
        BirthPlace_num=self.Number[7:9]
        Governorates=["Cairo","Alexandria","Port Said","Suez","Damietta","Dakahlia","elsharkia","Qalyubia","Kafr El-Sheikh","elgharbia","Menoufia","elbehera","Ismailia","Giza","Bani Sweif","Fayoum","Minya","Asyut","Sahaj","Qena","Aswan","Luxor","The Red Sea","the new Valley","matrooh","North Sinai","South of Sinaa","out of Egypt"]
        ara_Governorates=["القاهرة","الأسكندرية","بور سعيد","السويس","دمياط","الدقهلية","الشرقية","القليوبية","كفر الشيخ","الغربية","المنوفية","البحيرة","الاسماعيلية","الجيزة","بني سويف","الفيوم","المنيا","أسيوط","سوهاج","قنا","اسوان","الأقصر","البحر الأحمر","الوادي الجديد","مطروح","شمال سيناء","جنوب سيناء","خارج مصر"]
        G_Numbers=[1,2,3,4]
        FinalDict={}

        for i in range(11,36):
            if i==30 or i==20:
                continue
            G_Numbers.append(i)

        G_Numbers.append(88)
        x=0
        for i in G_Numbers:
            FinalDict[i]=ara_Governorates[x]
            x=x+1

        BirthPlace_num=int(BirthPlace_num)
        return FinalDict[BirthPlace_num]


    def get_Gender(self):
        """
         A Function that extract the Gender from the National ID card number.

         Parameters:
         - the id card number with type intger.

         Returns:
         - it return Gender of the id card owner with type string (male,female).
        """
        self.Number=str(self.Number)
        Gender=self.Number[len(self.Number)-2]
        Gender=int(Gender)
        if Gender%2==0:
            return "Female"
        else:
            return "Male"





def Age(BirthDate:dt.datetime):
    """
         A Function that Calculate the Age of specific BirthDate.

         Parameters:
         - A BirthDate of the id card owner with type datetime.

         Returns:
         - it return tuble of the with type int the id owner age in Years and how much Months.
    """
    now=dt.datetime.today()
    if now.month>=BirthDate.month:
        M=now.month-BirthDate.month
    else:
       M=(now.month-BirthDate.month)+12
    d=now.day-BirthDate.day
    Days=(now-BirthDate).days
    if d<0:
        F=30
        if BirthDate.month==1 or BirthDate.month==3 or BirthDate.month==5 or BirthDate.month==7 or BirthDate.month==8 or BirthDate.month==10 or BirthDate.month==12:
            F=31
        if BirthDate.month==2 :
            F=28
        d=d+F
    Years=Days//365
    return (Years,M)

def  get_num(num:str)-> str:
  """
  A Function that conver arabic number to english number.

  Parameters:
  - the number you want to convert it with type int.

  Returns:
  - it return a int english number .
  """
  if num=='١':
    return "1"
  if num=='٢':
    return "2"
  if num=="٣":
    return "3"
  if num=='٤':
    return "4"
  if num=='٥':
    return "5"
  if num=='٦':
    return "6"
  if num=='٧':
    return "7"
  if num=='٨':
    return "8"
  if num=='٩':
    return "9"

# id=""
# for i in id_num:
#   id+=str(i)


# print(id)
# print()

# x=ID(int(id))
# x1=x.get_BirthDate()
# print(x1)
# print()
# x2=x.get_BirthPlace()
# print(x2)
# print()
# x3=x.get_Gender()
# if x3=="Female":
#   x3="انثى"
# elif x3=="Male":
#     x3="ذكر"
# print(x3)
# print()
# age=Age(x1)
# print(f"the card owner have {age[0]} year and {age[1]} month")

def convert_to_eng(dict):
  new_dict=dic.copy()
  id=new_dict["id"]
  id_2=new_dict["id_2"]
  new_id=""
  new_id_2=""
  for i in id:
    if i == " ":
      continue
    new_id+=str(get_num(i))
  for x in id_2:
    if x == " ":
      continue
    new_id_2+=str(get_num(x))

  for K,V in new_dict.items():
    if K=="id":
      new_dict[K]=new_id
    if  K=="id_2":
      new_dict[K]=new_id_2
  return new_dict

# !python3 -m pip install paddlepaddle
# !pip install "paddleocr>=2.0.1"

from paddleocr import PaddleOCR,draw_ocr
ocr = PaddleOCR(use_angle_cls=True, lang='ar')

def split_txt(txt:str)-> list:
  """
  A Function that split a text into letters to use it in revers_txt function.

  Parameters:
  - text with type string.

  Returns:
  - it return a List that have letters of the input text.

  """
  temp=[]
  for i in txt:
    temp.append(i)
  return temp

def revers_txt(lis:list)-> list:
  """
  A Function that revers a list of texts we use it to reverse arabic words.

  Parameters:
  - A List of texts.

  Returns:
  - it return a new List that have a list with reversd texts.

  """
  newList=[]
  new_txt=""
  for i in lis:
     temp=split_txt(i)
     new_txt=""
     for c in range(len(temp),0,-1):
       new_txt+=temp[c-1]
     newList.append(new_txt)

  return newList
# print(revers_txt(["انلعجت"," ةلاح"]))

def compare_id(id1:int,id2:int)->str:
  """
  A Function that compare id that been extracted using template matching and id that been extracted using paddle ocr to replace the id
  that been extracted using paddle ocr with more accurate id.

  Parameters:
  - A int id1 id that been extracted using template matching.
  - A int id2 id that been extracted using paddle ocr.

  Returns:
  - it return a more accurate string id.
  """
  last_id=""
  i=0
  i2=0
  try:
    for x in range(len(id1)):
      if id2[i]!=id1[i2]:
        last_id+='0'
        i2+=1
      else:
        last_id+=id2[i]
        i+=1
        i2+=1
  except Exception as e:
    last_id+='0'

  return  last_id

# #101001068040
# s=compare_id("27303066404337","111684")
# print(s)

def get_data(img_path:str)->dict:
  """
  A Function that extract the text from image or specific part from image using paddleOCR.

  Parameters:
  - The image path of the image.

  Returns:
  - it return a Dictionary and the Values of Dictionary the words that been extracted from image and the keys of the Dictionary is specific data
    from the image that we focus on it to be extracted like Frist Name and the rest of the name and so on.
  """
  img=cv2.imread(img_path)

  processed_image = cv2.resize(img, (700, 480))
  processed_image=cv2.cvtColor(processed_image,cv2.COLOR_BGR2RGB)

  name = processed_image[290:360,  320:680]
  name=cv2.bilateralFilter(name,11,17,17)

  # id = processed_image[350:400 ,  350:685]
  # id = cv2.resize(id, (1080, 350))
  # id=cv2.bilateralFilter(id,11,17,17)

  # id_2 = processed_image[390:438 , 398:680]
  # id_2= cv2.resize(id_2, (1080, 350))
  # id_2=cv2.bilateralFilter(id_2,11,17,17)

  id_data = [name]
  data=["name"]


  data_out={}


  for x,y in zip(id_data,data):
      text = ocr.ocr(x, cls=True)
      data_out[y]=text



  length=0
  boxes = {}
  txts = {}
  scores = {}
  for key,item in data_out.items():
    length=len(data_out[key][0])
    boxes[key]=[item[0][0][0]]
    txts[key]=[item[0][0][1][0]]
    scores[key]=[item[0][0][1][1]]
    for i in range(1,length):
      boxes[key].append(item[0][i][0])
      txts[key].append(item[0][i][1][0])
      scores[key].append(item[0][i][1][1])

  new_data_out={}

  for key,item in txts.items():
    new_data_out[key]=revers_txt(item)

  # id=""
  # id_2=""
  name=""
  for key,item in new_data_out.items():
    for i in item[::-1]:
      if key=='name':
        name+=i+" "
      # if key=='id':
      #   id+=i+" "
      # if key=='id_2':
      #   id_2+=i+" "
  return {"name":name}

# dic=get_data("/content/tamween.jpeg")
# # eng_dic=convert_to_eng(dic)
# print(dic)
# # print(eng_dic)
# # ocr_id=compare_id(id,eng_dic['id'])
# # print(ocr_id)

def get_final_data(img_path)->dict:
  """
    A function named 'get_final_data' that processes an image to extract various information, including personal identification numbers, birth date, birth place, gender, and age.

    Parameters:
    - img_path: The path to the input image file.

    Returns:
    - A dictionary containing the extracted information from the image, including personal identification numbers, birth date, birth place, gender, and age. The function utilizes the 'get_data' and 'get_number' functions to retrieve initial data and identification numbers. It then processes and validates the obtained ID numbers, extracts birth date, and calculates age.
  """
  data=get_data(img_path)
  new_data={}
  new_data["id"]=get_number(img_path,1)
  new_data["id_2"]=get_number(img_path,2)
  for key,item in data.items():
    new_data[key]=item
  id=""
  id_2=""
  for key,value in new_data.items():
    if key=="id":
      for i in value:
        id+=str(i)
    if key=="id_2":
      for i in value:
          id_2+=str(i)
  Month=int(id[3:5])
  Day=int(id[5:7])
  if Month>12 or Month==0:
    id=id.replace(id[3:5], "12")
    new_data['problem']='Date of birth and age will not be correct'
  if Day>31 or Day==0:
    id=id.replace(id[5:7], "29")
    new_data['problem']='Date of birth and age will not be correct'
  new_data["id"]=id
  new_data["id_2"]=id_2
  x=ID(int(id))
  x1=x.get_BirthDate()
  x2=x.get_BirthPlace()
  x3=x.get_Gender()
  if x3=="Female":
    x3="انثى"
  elif x3=="Male":
    x3="ذكر"
  age=Age(x1)
  new_data["Birth Date"]=x1.strftime("%Y-%m-%d")
  new_data["Birth Place"]=x2
  new_data["Gender"]=x3
  new_data["Age"]= f"{age[0]} year and {age[1]} month"
  return new_data

# get_final_data("/content/tamween3.png")